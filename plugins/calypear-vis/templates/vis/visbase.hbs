<style>


#visWorkspace {
  height: 95vh;
  width: 100vw;
  position: relative;
}
#workspaceDisplay {
  width: 100%;
  height: 100%;
}
svg {
  background-color: white;
}

#workspaceControls{
  position: absolute;
  left: 0em;
  top: 0em;
  width: 25em;
}

#workspaceSearchBox {
  /*padding: 0.5em;
  padding-top: 1em;
  padding-bottom: 1em;*/
  display: flex;
  align-items: center;
}

#workspaceSearchBox span {
  padding: 0;
  margin: 0;
  height: 100%;
}
#workspaceSearchBox input {
  flex-grow: 1;
  padding-left: 0.5em;
  margin: 0;
  border: none;
  box-sizing: border-box;
  height: 100%;
}


#nodeDetailsPanel {
  padding: 0;
}

#nodeDetailsPanel .row {
  padding: 0.5em;
}



#nodeDetailsPanel #viewComponentName label {
  display: none;
}
#nodeDetailsPanel #viewComponentName p {
  font-size: 1.5em;
  font-weight: bold;
}

#nodeDetailsPanel #viewDescription label {
  display: none;
}

#workspaceMenu {
  position: absolute;
  width: 350px;
  left: -400px;
  top: 0px;
  height: 100%;
  overflow: hidden;
  background-color: #fff;
  border-right: 2px solid #ddd;

}
.hidden {
  display: none;
}

.workspace-panel {
  margin-top: 1em;
  margin-left: 1em;
  border-radius: 2px;
  background-color: white;
  padding: 0px;
  box-shadow: 3px 3px 3px #999;
  border: 1px solid #ddd;
  padding: 0.5em;
}

.workspace-menu-block {
}


.workspace-menu-block h1 {
  font-size: 1em;
  padding-left: 0.5em;
  padding-right: 0.5em;
  padding-top: 0.5em;
  padding-bottom: 0.5em;
  border-top: 1px solid #999;
  background-color: #ddd;
}


.searchResultItem {
  display: flex;
  flex-wrap: nowrap;
  padding: 0.5em;
}

.searchResultItem .itemName  {
  flex-grow: 1;
}

.searchResultItem .actionItem {
  flex-shrink: 0;
  cursor: pointer;
}

</style>
<div class="row">
  <div id="visWorkspace">
    <div id="workspaceDisplay">
      <svg width="100%" height="100%" viewBox="0 0 1000 1000" preserveAspectRatio="xMidYMid slice">
      <style>
        text, p {
          font-family: "arial", sans-serif;
          font: arial;
        }

        .link-group path {
          stroke: #999;
          stroke-opacity: 0.6;
          stroke-width: 3px;
          fill: none;
          /*marker-end: url(#markerArrow);
          marker-mid: url(#markerArrow);*/
        }

        .diagram-node foreignObject {
          overflow: visible;
        }
        .diagram-node foreignObject p {
          overflow: visible;
        }
        .node-group .diagram-node circle {
          stroke: #fff;
          stroke-width: 1.5px;
        }

        .node-group .diagram-node.selected circle {
          stroke: #000;
        }

        .node-text {
          font-size: 8px;
          text-align: center;

        }
        .node-text p {
          margin: 0;
          padding: 0;
          background: rgba(255,255,255,0.5);
        }

        .diagram-link-label {
          font-size: 6px;
          text-align: center;
          stroke: none;
          fill: #666;
        }
      </style>
        <defs>
          <marker id="markerArrow" markerWidth="13" markerHeight="13" refX="2" refY="6" orient="auto">
            <path d="M2,2 L2,11 L10,6 L2,2" style="fill: #000000;" />
          </marker>
          {{#each componentTypes}}
            {{#if diagramIcon}}
              <symbol id="diagramIcon{{id}}" viewbox="0 0 24 24">
                {{{diagramIcon}}}
              </symbol>
            {{/if}}
          {{/each}}
        </defs>

      </svg>
    </div>
    <div id="workspaceControls">
      <div id="workspaceSearchBox" class="workspace-panel">
          <span id="buttonShowMenu" class="material-icons">menu</span>
          <input type="text" id="searchTermInput" placeholder="Type a component name to add..."/>
          <span id="buttonShowMenu" class="material-icons">search</span>
      </div>
      <div id="componentSearchResults" class="workspace-panel hidden">
      </div>
      <div id="nodeDetailsPanel" class="workspace-panel hidden">

        <div class="row" id="viewComponentName">
          <label for="viewComponenetName">Name</label>
          <p>Test Component Name</p>
        </div>
        <div class="row" id="viewDescription">
          <label for="viewDescription">Description</label>
          <p >More elaborate text goes here about the component</p>
        </div>
        <div class="row">
          <label for="fieldComponentIncluded">
            <input type="checkbox" name="includedInDiagram" id="fieldComponentIncluded">
            <span class="label-body">Included in Diagram</span>
          </label>
        </div>
        <div class="row">
          <label for="fieldIsPinned">
            <input type="checkbox" name="isPinned" id="fieldIsPinned">
            <span class="label-body">Pin to Position</span>
          </label>
        </div>
        <div class="row">
          <button id="fieldAddRelatedComponents" class="u-full-width">Show Relationships</button>
          <button id="fieldIncludeRelatedComponents" class="u-full-width">Include Relationships</button>
          <button id="fieldRemoveComponent" class="u-full-width">Remove</button>
        </div>
      </div>
    </div>
    <div id="workspaceMenu">
      <div class="row workspace-menu-block">
        <a href="/">Exit Workbench</a>
        <a href="#" id="buttonHideMenu"><i class="material-icons">close</i>Hide</a>
      </div>
      <div class="row workspace-menu-block">
        <h1>Export</h1>
        <button id="workspaceExportSVGCommand">Export as SVG</button>
        <button id="workspaceExportPNGCommand">Export as PNG</button>
      </div>
      <div class="row workspace-menu-block" id="diagramPropertiesBlock">
        <h1>Diagram Properties</h1>
        <form>
          <div class="row">
            <label for="fieldDiagramName">Diagram Name</label>
            <input class="u-full-width" id="fieldDiagramName" name="name" required placeholder="Enter a diagram name"/>
          </div>
          <input class="hidden" id="fieldDiagramId" name="id"/>
          <button id="saveDiagramCommand">Save Diagram</button>
          <button id="saveNewDiagramCommand">Save as New Diagram</button>
        </form>
      </div>
      <div class="row workspace-menu-block">
        <h1>Actions</h1>
        <button id="removeOrphanComponentsCommand">Remove Unconnected</button>
        <button id="flourishAllCommand">Flourish All</button>
      </div>
    </div>
  </div>


</div>
<script src="/dist/js/d3.js"></script>
<script src="/dist/js/FileSaver.js"></script>
<script src="/dist/js/canvas-toBlob.js"></script>
<script src="/dist/js/calypearDiagram.js"></script>
<script src="/dist/js/diagramExporter.js"></script>

<script>
  //Add in a variable with relation types and names
  var relationTypes = [];
  {{#each relationTypes}}
    relationTypes.push({
      id: {{id}},
      name: "{{name}}",
      nameInverse: "{{nameInverse}}"
    });
  {{/each}}

  function getRelationTypeName(id,inverse){
    var foundItem = relationTypes.find((relationType)=>{
      return (relationType.id == id);
    });
    if (foundItem) {
      if (inverse)
        return foundItem.nameInverse;
      else
        return foundItem.name;
    } else {
      return '';
    }

  }

  var selectedNode = null;
  var zoom = d3.zoom()
    .scaleExtent([-20, 20])
    .on("zoom", zoomed);

  function zoomed() {
    svgWorkspace.attr("transform", d3.event.transform);
  }

  var svg = d3.select("svg")
    .call(zoom);

  var svgWorkspace = svg.append("g")
    .attr("class","drawingWorkSpace");

  width = 1000;
  height = 1000;
      // width = +svg.attr("width"),
      // height = +svg.attr("height");

  var color = d3.scaleOrdinal(d3.schemeCategory20);
  var connectorGenerator = d3.line()
    .curve(d3.curveBasis);

  function calculateNodeSize(d) {
    if (d.display.width <= 0) {
      return Math.max(5,Math.log(d.relationships.length)*5);
    } else {
      return d.display.width;
    }
  }

  /*
    This is all very suspicious -
    TODO: Clean this up and make it extensible.
  */
  var nodeBlockTextSize = {
    height: 20,
    width: 60,
    offset: {
      x: 5,
      y: 0
    }
  }


  function calculateNodeBlockSize(d) {
    var nodeSizeRadius = calculateNodeSize(d);
    return {
      x: Math.max(nodeSizeRadius*2,nodeBlockTextSize.width),
      y: ((nodeSizeRadius*2)+nodeBlockTextSize.offset.y+nodeBlockTextSize.height)
    }
  }

  function calculateNodeCollideRadius(d) {
    var blockSize = calculateNodeBlockSize(d);
    return Math.max(blockSize.x,blockSize.y)/2;
  }



  function constructNode(context) {
    // context = context.append("g")
    //   .attr("transform","translate")
    context.append("circle")
      .attr("cx",0)
      .attr("cy",function(d){
        return -(calculateNodeBlockSize(d).y/2);
      })
      .attr("r",function(d){ return calculateNodeSize(d);})
      .attr("fill",function(d) {return color(d.type.id)});
    context.append("use")
      .attr("href",function(d) {return "#diagramIcon"+d.type.id})
      //Set the icon to be centered in the middle
      .attr("transform","translate(-6,-6)")
      .attr("width",12)
      .attr("height",12);

    context.append("foreignObject")
      //To the left of the object
      .attr("x",-(nodeBlockTextSize.width/2))
      //Align the text in the middle (0,0 is the middle of the object)
      .attr("y",function(d){
        return (calculateNodeSize(d)+nodeBlockTextSize.offset.y)-(calculateNodeBlockSize(d).y/2);
      })
      // need atleast one dimension
      .attr("width",nodeBlockTextSize.width)
      //Let the object figure out height on its own
      //This needs to be added back in for the export (otherwise text dissapears)
      .attr("height",nodeBlockTextSize.height)
      .attr("class","node-text")
      .append("xhtml:p")
        .text(function(d) {return d.name});
  }

  var simulation = d3.forceSimulation()
      .force("link", d3.forceLink().id(function(d) { return d.id; }))
      .force("charge", d3.forceManyBody())
      .force("center", d3.forceCenter(width / 2, height / 2))
      .force("collide", d3.forceCollide(10).radius(function(d){
          return calculateNodeCollideRadius(d)*1.2; //Add a bit for padding
      }))
      .on("tick",ticked);

  var linkElements = svgWorkspace.append("g")
      .attr("class", "link-group")
    .selectAll(".diagram-link");

  var linkLabels = svgWorkspace.append("g")
      .attr("class","link-label-group")
    .selectAll(".diagram-link-label");

  var nodeElements = svgWorkspace.append("g")
    .attr("class", "node-group")
    .selectAll(".diagram-node");

  function refresh(graphNodes, graphEdges){

    nodeElements= nodeElements.data(graphNodes,function(d) {return d.id;});
    nodeElements.exit().remove();
    var nodeEnter  = nodeElements.enter()
      .append("g")
      .attr("class","diagram-node")
      .on("click",function(d){
        nodeClicked(d);
        d3.event.stopPropagation();
      })
      .attr("id",function(d) {return "node"+d.id;})
      .call(d3.drag()
          .on("start", dragstarted)
          .on("drag", dragged)
          .on("end", dragended));

    constructNode(nodeEnter);
    nodeElements = nodeEnter.merge(nodeElements);
    //constructNode(nodeElements);

    //Key function here doesnt' appear to work as well -
    //we are still left with floating elements... not sure why
    linkElements = linkElements.data(graphEdges,function(d) {return 'link'+d.id;});
    linkElements.exit().remove();
    var linkEnter = linkElements.enter()
      .append("path")
      .attr("class","diagram-link")
      .attr("stroke-width", 1)
      .attr("id",function(d) {return "link"+d.id;});
    linkElements = linkEnter.merge(linkElements);

    linkLabels = linkLabels.data(graphEdges,function(d) {return 'link'+d.id;});
    linkLabels.exit().remove();
    var linkLabelEnter = linkLabels.enter()
      .append("text")
      .attr("class","diagram-link-label")
      .attr('dy',"-4px")
      .attr("id",function(d) {return "link-label"+d.id;});

    linkLabelEnter.append('textPath')
        .attr('xlink:href',function(d,i) {return '#link'+d.id})
        .attr('startOffset',function(d) {return "40%";})

        .text(function(d,i){return getRelationTypeName(d.type,d.inverse);});

    linkElements = linkEnter.merge(linkElements);


    simulation.nodes(graphNodes);
    simulation.force("link")
       .links(graphEdges);
       //.distance(function(link){return 200});
    simulation.alpha(1).restart();

  }

  function ticked() {
    linkElements
      .attr("d",function(d) {
        var offsetSource = calculateNodeBlockSize(d.source);
        var offsetTarget = calculateNodeBlockSize(d.target)
        var points = [
          [d.source.x,d.source.y-(offsetSource.y/2)],
          [d.target.x,d.target.y-(offsetTarget.y/2)]
        ];
        return connectorGenerator(points);
      });

    nodeElements
      .attr("transform", function(d) { return "translate(" + (d.x) + "," + (d.y) + ")"; });
  }

  function dragstarted(d) {
    // d3.select("svgWorkspace").select(".selected").classed("selected",false);
    deSelectNodes();
    d3.select(this).classed("selected",true);

    nodeClicked(d);
    if (!d3.event.active) simulation.alphaTarget(0.3).restart();
    d.fx = d.x;
    d.fy = d.y;
    //note in D3 \v4 .fixed setting no longer works need to use fx/fy
  }

  function dragged(d) {
    var grid = 10;
    //Don't lock to the grid until we actually start dragging a bit
    if ((Math.abs(d.x-d3.event.x) > 5) || (Math.abs(d.y-d3.event.y) > 5)) {
      //Force items to land on a squared off grid - to avoid finicky positioning
      d.fx = Math.round(d3.event.x/grid)*grid;
      d.fy = Math.round(d3.event.y/grid)*grid;
    }


  }

  function dragended(d) {
    //Stop the simulation
    if (!d3.event.active) {
      simulation.alphaTarget(0)
      //If the Shift key is held down then lock the node in position
      //Touching the node again will free it
      //Need to resolve this.
      if (!d.isPinned()) {
        d.fx = null;
        d.fy = null
      }
    };

  }

  svg.on("click",function(){
    deSelectNodes();
    //TODO: this appears broken now as it onyl des-select one at a time?

  })

  function deSelectNodes() {
    d3.selectAll(".selected").classed("selected",false);
    d3.selectAll("#nodeDetailsPanel")
      .classed("hidden",true);
  }

  function selectNode(d) {
    //Although this has modifiers the source of truth for diagram data remains
    //the CalypearDiagramComponent
    var detailsPanel = d3.selectAll("#nodeDetailsPanel");
    detailsPanel.classed("hidden",false);
    detailsPanel.attr("data-nodeid",d.id);
    selectedNode = d.id;

    detailsPanel.select("#viewComponentName p")
      .text(d.name);

    detailsPanel.select("#viewDescription p")
      .text(d.description);

    detailsPanel.select("#fieldComponentIncluded")
      .attr("data-nodeid",d.id)
      .property("checked",d.isIncludedInDiagram())
      .on("change",function(){
        //If checked pin the node at the current position
        var changedField = d3.select(this);
        var nodeid = changedField.attr('data-nodeid');
        var attachedNode = diagram.nodeById(nodeid);
        if (attachedNode) {
            attachedNode.included(changedField.property("checked"));
         }
      });

    detailsPanel.select('#fieldIsPinned')
      .property("checked",d.isPinned())
      .attr("data-nodeid",d.id)
      .on("change",function(){
        //If checked pin the node at the current position
        var changedField = d3.select(this);
        var nodeid = changedField.attr('data-nodeid');
        var attachedNode = diagram.nodeById(nodeid);
        if (attachedNode) {
           if (changedField.property("checked")) {
              attachedNode.pinAtPosition();
           } else {
             attachedNode.pinRelease();
           }

         }
      });


      detailsPanel.select('#fieldAddRelatedComponents')
        .attr("data-nodeid",d.id)
        .text("Show "+d.getRelationships().length+" Relationships")
        .on('click',function(){
          var changedField = d3.select(this);
          var nodeid = changedField.attr('data-nodeid')
          diagram.retrieveAndAddRelatedComponents(nodeid);
        });


      detailsPanel.select('#fieldRemoveComponent')
        .attr("data-nodeid",d.id)
        .on('click',function(x){
          var changedField = d3.select(this);
          var nodeid = changedField.attr('data-nodeid');
          diagram.removeComponents(parseInt(nodeid));
        })

  }

  function nodeClicked(d) {
    selectNode(d);
  }

  function updateDiagramPropertiesForm(diagram) {
    //diagramPropertiesBlock
    var diagramPropertiesBlock = d3.select('#diagramPropertiesBlock');
    console.log(diagram.name());
    if (diagram.id) {
      //This is a known diagram
      diagramPropertiesBlock.select('#fieldDiagramName')
        .attr("value",diagram.name())
      diagramPropertiesBlock.select('#fieldDiagramId')
        .attr("value",diagram.id)
    } else {
      //Unknown diagram
      diagramPropertiesBlock.select('#fieldDiagramName')
        .attr("value",null)
      diagramPropertiesBlock.select('#fieldDiagramId')
        .attr("value",null)
    }
  }

  /**
    Line Generator Testing
  */

</script>
<script>
  var componentSearchResults = [];
  //This section gets replaced by a remote query at a later stage
  {{#each components}}
    componentSearchResults.push({
      name: "{{name}}",
      typeName: "{{type.name}}",
      id: "{{id}}"
    })
  {{/each}}

  var delay = (function(){
    var timer = 0;
    return function(callback, ms){
      clearTimeout (timer);
      timer = setTimeout(callback, ms);
    };
  })();

  function getComponentSearchResults(searchTerm) {
    searchTerm = searchTerm.toLowerCase();
    var searchResults = componentSearchResults.filter(function(component){
      return component.name.toLowerCase().indexOf(searchTerm) >= 0;
    },searchTerm);
    return searchResults;
  }

  $('#searchTermInput').keyup(function() {
      delay(function(){
        if ($('#searchTermInput').val().length > 2){
          var matchingComponents = getComponentSearchResults($('#searchTermInput').val());
          var searchResultElements = d3.select('#componentSearchResults').selectAll('.searchResultItem')
            .data(matchingComponents,function(d) {return d.id;});
          searchResultElements.exit().remove();
          var searchResultEnter = searchResultElements.enter()
              .append('div')
              .attr('class','searchResultItem');

          searchResultEnter.append('span')
            .attr("class","itemName")
            .text(function(d){return d.name})


          searchResultEnter.append('i')
            .attr("class","material-icons actionItem")
            .text('add_box')
            .on('click',function(d){
              diagram.retrieveAndAddComponents(d.id,false);
            })
          searchResultEnter.append('i')
            .attr("class","material-icons actionItem")
            .text('library_add')
            .on('click',function(d){
              diagram.retrieveAndAddComponents(d.id,true);
            })


          d3.select('#componentSearchResults').classed('hidden',!(matchingComponents.length > 0));
        }
      }, 300 );
  });

  //Hide the Search results when the user clicks away
  //onblur no used as we want it to stay open if a search result is clicked
  $('svg').focus(function(){
    d3.select('#componentSearchResults').classed('hidden',true);
  });




</script>
<script>
  var diagram = new CalypearDiagram();
  /*
    Diagram Component Add/Remove/Filter and Save Functions

    This is all to be moved to D3 style for consistency
    however Jquery will work for now as well.
  */
  $().ready(function(){
    {{#if diagram}}
      diagram.retrieveDiagramFromServer({{diagramId}}).then(() => {
        updateDiagramPropertiesForm(diagram);
      });
    {{/if}}

    {{#if componentId}}
      diagram.retrieveAndAddComponents([{{componentId}}]).then(() => {
          diagram.retrieveAndAddRelatedComponents([{{componentId}}]);
      });
    {{/if}}



    $('.diagram-component-add').click(function(){
      diagram.retrieveAndAddComponents([
          $(this).data('componentid')
      ],true);

    });

    $('#saveDiagramCommand').click(function(){
      diagram.name($('#fieldDiagramName').val());
      diagram.saveDiagramToServer().then(()=>{
        updateDiagramPropertiesForm(diagram);
      });
      return false;
    });

    $('#saveNewDiagramCommand').click(function(){
      diagram.name($('#fieldDiagramName').val());
      //Removing the ID will foce a new Diagram
      diagram.id = null;
      diagram.saveDiagramToServer().then(()=>{
        updateDiagramPropertiesForm(diagram);
      });
      return false;
    });

    $('#removeOrphanComponentsCommand').click(function(){
      diagram.removeOrphanComponents();
    });

    $('#flourishAllCommand').click(function(){
      diagram.flourishAll();
    })

    $('#buttonShowMenu').click(function(){
      d3.select("#workspaceMenu").transition().style("left","0px");
    })

    $('#buttonHideMenu').click(function(){
      d3.select("#workspaceMenu").transition().style("left","-400px");
    })

    $('#workspaceExportSVGCommand').click(function(){
      exporter = new SVGDiagramExporter();
      exporter.generateData(svg.node()).then((imageBlob) => {
          saveAs(imageBlob,diagram.name() + '.svg');
      })
    });

    $('#workspaceExportPNGCommand').click(function(){
      exporter = new PNGDiagramExporter();
      exporter.generateData(svg.node(),{
        width: 2000,
        height: 2000
      }).then((imageBlob) => {
          saveAs(imageBlob,diagram.name() + '.png');
      });

    });


    //Keyboard Shortcuts for exploring
    $('svg').keypress(function(keyEvent){
      console.log(keyEvent.keyCode);
      switch (keyEvent.keyCode) {
          //e = Expand
          case 101:
            if (selectedNode) {
                diagram.retrieveAndAddRelatedComponents([selectedNode]);
            }
          //E = Expand and Include
          case 69:
            if (selectedNode) {
                diagram.retrieveAndAddRelatedComponents([selectedNode],true);
            }
          break;
          //f = Flourish
          case 102:
                diagram.flourishAll();
          break;
          //x = Remove
          case 120:
            if (selectedNode) {
                diagram.removeComponents([selectedNode]);
            }
          break;
          //p = pinAtPosition
          case 112:
            if (selectedNode) {
              var node = diagram.nodeById(selectedNode);
              if (node) {
                if (node.isPinned){
                  node.pinAtPosition();
                } else {
                  node.pinRelease();
                }

                //Update the display
                selectNode(node);
              }
            }
          break;
      }
    });

  });

</script>
