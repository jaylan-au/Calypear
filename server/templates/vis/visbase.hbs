<style>

.link-group path {
  stroke: #999;
  stroke-opacity: 0.6;
  fill: none;
  /*marker-end: url(#markerArrow);
  marker-mid: url(#markerArrow);*/
}


.node-group .diagram-node circle {
  stroke: #fff;
  stroke-width: 1.5px;
}

.node-group .diagram-node.selected circle {
  stroke: #000;
}

.node-text {
  font-size: 8px;
  text-align: center;
}

.diagram-link-label {
  font-size: 8px;
  text-align: center;

}
#visWorkspace {
  height: 95vh;
  width: 100vw;
  position: relative;
}
#workspaceDisplay {
  width: 100%;
  height: 100%;
}
svg {
  background-color: white;
}

#workspaceControls{
  position: absolute;
  left: 0em;
  top: 0em;
  width: 320px;
}

#workspaceSearchBox {
}

#workspaceSearchBox span {
  padding: 0;
  margin: 0;
  height: 100%;
}
#workspaceSearchBox input {
  padding: 0;
  padding-left: 1em;
  margin: 0;
  border: none;
  box-sizing: border-box;
  height: 100%;
}
#nodeDetailsPanel #viewComponentName label {
  display: none;
}
#nodeDetailsPanel #viewComponentName p {
  font-size: 1.5em;
  font-weight: bold;
}

#workspaceMenu {
  position: absolute;
  width: 350px;
  left: -400px;
  top: 0px;
  height: 100%;
  overflow: hidden;
  background-color: #fff;
  border-right: 2px solid #ddd;

}
.hidden {
  display: none;
}

.workspace-panel {
  margin-top: 1em;
  margin-left: 1em;
  border-radius: 2px;
  background-color: white;
  padding: 0px;
  box-shadow: 3px 3px 3px #999;
  border: 1px solid #ddd;
  padding: 0.5em;
}

.material-icons {
  font-family: 'Material Icons';
  font-weight: normal;
  font-style: normal;
  font-size: 24px;  /* Preferred icon size */
  display: inline-block;
  line-height: 1;
  text-transform: none;
  letter-spacing: normal;
  word-wrap: normal;
  white-space: nowrap;
  direction: ltr;

  /* Support for all WebKit browsers. */
  -webkit-font-smoothing: antialiased;
  /* Support for Safari and Chrome. */
  text-rendering: optimizeLegibility;

  /* Support for Firefox. */
  -moz-osx-font-smoothing: grayscale;

  /* Support for IE. */
  font-feature-settings: 'liga';
}
</style>
<div class="row">
  <div id="visWorkspace">
    <div id="workspaceDisplay">
      <svg width="100%" height="100%" viewBox="0 0 1000 1000" preserveAspectRatio="xMidYMid slice">
        <defs>
          <marker id="markerArrow" markerWidth="13" markerHeight="13" refX="2" refY="6" orient="auto">
            <path d="M2,2 L2,11 L10,6 L2,2" style="fill: #000000;" />
          </marker>
        </defs>
      </svg>
    </div>
    <div id="workspaceControls">
      <div id="workspaceSearchBox" class="workspace-panel">
        <div>
          <span class="material-icons" id="buttonShowMenu">menu</span>
          <input type="text"/>
        </div>
      </div>
      <div id="nodeDetailsPanel" class="workspace-panel hidden">

        <div class="row" id="viewComponentName">
          <label for="viewComponenetName">Name</label>
          <p>Test Component Name</p>
        </div>
        <div class="row">
          <label for="viewDescription">Description</label>
          <p id="viewDescription">More elaborate text goes here about the component</p>
        </div>
        <div class="row">
          <label for="fieldComponentIncluded">
            <input type="checkbox" name="includedInDiagram" id="fieldComponentIncluded">
            <span class="label-body">Included in Diagram</span>
          </label>
        </div>
        <div class="row">
          <label for="fieldIsPinned">
            <input type="checkbox" name="isPinned" id="fieldIsPinned">
            <span class="label-body">Pin to Position</span>
          </label>
        </div>
        <div class="row">
          <button id="fieldAddRelatedComponents" class="u-full-width">Show Relationships</button>
          <button id="fieldIncludeRelatedComponents" class="u-full-width">Include Relationships</button>
          <button id="fieldRemoveComponent" class="u-full-width">Remove</button>
        </div>
      </div>
    </div>
    <div id="workspaceMenu">
      <div class="row">
        <a href="/">Exit Workbench</a>
        <button id="buttonHideMenu">Hide</button>
      </div>


      <div class="u-full-width u-max-full-width">
          <label for="fieldDiagramName">Diagram Name</label>
          <input id="fieldDiagramName" name="name" />
          <button id="saveDiagramCommand">Save Diagram</button>
      </div>
      <div class="u-full-width u-max-full-width" id="nodeSearchPanel">
        <div class="row" id="nodeSearchForm">
            <label for="fieldSearchName">Component Name</label>
            <input id="fieldSearchName" name="name" />
            <button id="buttonNameSearch">Search</button>
        </div>
        <div class="row" id="nodeSearchResults">

        </div>
        <ul>
          {{#each components}}
          <li><span>{{name}}</span> <span>{{type.name}}</span> <button class="diagram-component-add" data-componentId="{{id}}">Add</button></li>
          {{/each}}
        </ul>
      </div>
    </div>
  </div>


</div>
<script src="/dist/js/d3.js"></script>
<script>

  var svg = d3.select("svg");
  width = 1000;
  height = 1000;
      // width = +svg.attr("width"),
      // height = +svg.attr("height");

  var color = d3.scaleOrdinal(d3.schemeCategory20);
  var connectorGenerator = d3.line()
    .curve(d3.curveBasis);


  function constructNode(context) {
    context.append("circle")
      .attr("cx",0)
      .attr("cy",0)
      .attr("r",6)
      .attr("fill",function(d) {return color(d.type.id)});
    context.append("foreignObject")
      .attr("x",-40)
      .attr("y",5)
      .attr("width",80)
      .attr("height",40)
      .attr("class","node-text")
      .append("xhtml:p")
        .text(function(d) {return d.name});
  }

  var simulation = d3.forceSimulation()
      .force("link", d3.forceLink().id(function(d) { return d.id; }))
      .force("charge", d3.forceManyBody())
      .force("center", d3.forceCenter(width / 2, height / 2))
      .force("collide", d3.forceCollide(10))
      .on("tick",ticked);

  var linkElements = svg.append("g")
      .attr("class", "link-group")
    .selectAll(".diagram-link");

  var linkLabels = svg.append("g")
      .attr("class","link-label-group")
    .selectAll(".diagra-link-label");

  var nodeElements = svg.append("g")
    .attr("class", "node-group")
    .selectAll(".diagram-node");

  function refresh(graphNodes, graphEdges){
    //console.log(graphEdges);
    //Key function prevents weird update problems of D3 using array order
    nodeElements= nodeElements.data(graphNodes,function(d) {return d.id;});
    nodeElements.exit().remove();
    var nodeEnter  = nodeElements.enter()
      .append("g")
      .attr("class","diagram-node")
      .on("click",function(d){
        nodeClicked(d);
        d3.event.stopPropagation();
      })
      .attr("id",function(d) {return "node"+d.id;})
      .call(d3.drag()
          .on("start", dragstarted)
          .on("drag", dragged)
          .on("end", dragended));

    constructNode(nodeEnter);
    nodeElements = nodeEnter.merge(nodeElements);
    //constructNode(nodeElements);

    //Key function here doesnt' appear to work as well -
    //we are still left with floating elements... not sure why
    linkElements = linkElements.data(graphEdges,function(d) {return 'link'+d.id;});
    linkElements.exit().remove();
    var linkEnter = linkElements.enter()
      .append("path")
      .attr("class","diagram-link")
      .attr("stroke-width", 1)
      .attr("id",function(d) {return "link"+d.id;});
    linkElements = linkEnter.merge(linkElements);

    simulation.nodes(graphNodes);
    simulation.force("link")
       .links(graphEdges);
      // .distance(function(link){return link.distanceAssoc*5;});
    simulation.alpha(1).restart();
  }

  function ticked() {
    linkElements
      .attr("d",function(d) {
        var points = [
          [d.source.x,d.source.y],
          [d.target.x,d.target.y]
        ];
        return connectorGenerator(points);
      });

    nodeElements
      .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
  }

  function dragstarted(d) {
    d3.select("svg").select(".selected").classed("selected",false);
    d3.select(this).classed("selected",true);

    nodeClicked(d);
    if (!d3.event.active) simulation.alphaTarget(0.3).restart();
    d.fx = d.x;
    d.fy = d.y;
    //note in D3 \v4 .fixed setting no longer works need to use fx/fy
  }

  function dragged(d) {
    var grid = 10;
    //Don't lock to the grid until we actually start dragging a bit
    if ((Math.abs(d.x-d3.event.x) > 5) || (Math.abs(d.y-d3.event.y) > 5)) {
      //Force items to land on a squared off grid - to avoid finicky positioning
      d.fx = Math.round(d3.event.x/grid)*grid;
      d.fy = Math.round(d3.event.y/grid)*grid;
    }


  }

  function dragended(d) {
    //Stop the simulation
    if (!d3.event.active) {
      simulation.alphaTarget(0)
      //If the Shift key is held down then lock the node in position
      //Touching the node again will free it
      //Need to resolve this.
      if (!d.pinned) {
        d.fx = null;
        d.fy = null
      }
    };

  }

  svg.on("click",function(){
    deSelectNodes();
    d3.select("svg").select(".selected").classed("selected",false);
  })

  function deSelectNodes() {
    d3.selectAll("#nodeDetailsPanel")
      .classed("hidden",true);
  }

  function selectNode(d) {
    //Although this has modifiers the source of truth for diagram data remains
    //the CalypearDiagramComponent
    var detailsPanel = d3.selectAll("#nodeDetailsPanel");
    detailsPanel.classed("hidden",false);
    detailsPanel.attr("data-nodeid",d.id);
    detailsPanel.select("#viewComponentName p")
      .text(d.name);

    detailsPanel.select("#viewDescription")
      .text(d.description);

    detailsPanel.select("#fieldComponentIncluded")
      .attr("data-nodeid",d.id)
      .property("checked",d.isIncludedInDiagram())
      .on("change",function(){
        //If checked pin the node at the current position
        var changedField = d3.select(this);
        var nodeid = changedField.attr('data-nodeid');
        var attachedNode = diagram.nodeById(nodeid);
        if (attachedNode) {
            attachedNode.included(changedField.property("checked"));
         }
      });

    detailsPanel.select('#fieldIsPinned')
      .property("checked",d.isPinned())
      .attr("data-nodeid",d.id)
      .on("change",function(){
        //If checked pin the node at the current position
        var changedField = d3.select(this);
        var nodeid = changedField.attr('data-nodeid');
        var attachedNode = diagram.nodeById(nodeid);
        if (attachedNode) {
           if (changedField.property("checked")) {
              attachedNode.pinAtPosition();
           } else {
             attachedNode.pinRelease();
           }

         }
      });


      detailsPanel.select('#fieldAddRelatedComponents')
        .attr("data-nodeid",d.id)
        .text("Show "+d.getRelationships().length+" Relationships")
        .on('click',function(){
          var changedField = d3.select(this);
          var nodeid = changedField.attr('data-nodeid')
          diagram.retrieveAndAddRelatedComponents(nodeid);
        });


      detailsPanel.select('#fieldRemoveComponent')
        .attr("data-nodeid",d.id)
        .on('click',function(x){
          var changedField = d3.select(this);
          var nodeid = changedField.attr('data-nodeid');
          diagram.removeComponents(parseInt(nodeid));
        })

  }

  function nodeClicked(d) {
    selectNode(d);
  }

  /**
    Line Generator Testing
  */

</script>
<script>
  class CalypearDiagramComponent {
    constructor(componentData,includedInDiagram) {
      if (componentData != null) {
        if (componentData.id) {
          this.id = componentData.id;
        }

        if (componentData.name) {
          this.name = componentData.name;
        }

        if (componentData.type) {
          this.type = {};
          if (componentData.type.id) {
            this.type.id = componentData.type.id;
          }
          if (componentData.type.name) {
            this.type.name = componentData.type.name;
          }
        }

        this.relationships = componentData.relationships;
        //Set the Source/Target fields
        this.relationships.forEach(function(relationship) {
          relationship.source = relationship.from;
          relationship.target = relationship.to;
        });

      }

      this.includedInDiagram = includedInDiagram;

      this.pinAt(componentData.fixedX, componentData.fixedY);
    }

    pinAtPosition(){
      this.pinAt(this.x, this.y);
    }

    pinAt(x,y){
      this.fx = x;
      this.fy = y;

      if (x || y) {
        this.pinned = true;
      } else {
        this.pinned = false;
      }
      return this;
    }

    pinRelease(){
      this.pinAt(null,null);
      return this;
    }

    isPinned(){
      //No longer relies on the Fx/Fy positions as they are set by the dragging
      //logic hence may or may not be set.
      return this.pinned;
    }

    included(includedInDiagram = true) {
      this.includedInDiagram = includedInDiagram
      return this;
    }

    isIncludedInDiagram() {
      return this.includedInDiagram;
    }

    getForwardRelationships() {
      return this.relationships.filter(function(relationship){
        return relationship.inverse == false
      });
    }

    getRelationships() {
      return this.relationships;
    }

    getRelatedComponentIds(forwardOnly = false, limitType = null){
      var forwardIds = this.relationships.map(function(relationship){
        return relationship.to;
      });
      if (!forwardOnly) {
        forwardIds.concat(this.relationships.map(function(relationship){
          return relationship.from;
        }));
      }
      return forwardIds;
    }

    getDiagramSaveObject(){
      var componentToSave = {
        component: this.id,
      }
      if (this.isPinned()) {
        componentToSave.fixedX = this.fx;
        componentToSave.fixedY = this.fy;
      }
      return componentToSave;
    }
  }

  class CalypearDiagram  {
    constructor() {
      this.diagramComponents = new Array();
      this.diagramName = 'Untitled';
    }

    name(name){
      if (name) {
        this.diagramName = name;
        return this;
      } else {
        return this.diagramName;
      }
    }

    nodeById(nodeId) {
      return this.diagramComponents.find(function(component){
        return component.id == nodeId;
      })
    }

    nodes() {
      return this.diagramComponents;
    }

    edges() {
      var edges = [];
      var componentIds = [];
      //Pull out the relationships for all the diagram components
      /**
        Note: The deep copy is to prevent the issue with removing items
        creating weird edges that don't connect to things
        Probably a much more effecient way to do this but will solve tht later
        TODO: Do this better
      */
      this.diagramComponents.forEach(function(component) {
        edges = edges.concat(component.getRelationships().map(function(relationship){
          return JSON.parse(JSON.stringify(relationship))
        }));
        // edges = edges.concat(component.getRelationships());
        componentIds.push(component.id);
      });
      //Filter out relationships to unknown objects
      edges = edges.filter(function(relationship,index,relationsArray) {
        return (componentIds.includes(relationship.to) && (componentIds.includes(relationship.from)));
      });
      //Filter out inverse Relationships when a forward relationship exists
      //TODO: this
      return edges;
    }

    removeComponents(componentIds, refreshOnSuccess = true) {
      //Force componentIds to be an array so we can process consistently
      if (!(componentIds instanceof Array)) {
        componentIds = [componentIds];
      }
      //Get a map of the element ids from the components Array
      var elementsToRemove = [] ;

      this.diagramComponents.forEach(function(element, index){
        if (componentIds.includes(element.id)) {
          elementsToRemove.push(index);
        }
      })

      //sort the elements to remove and reverse it so we work back from the end
      //of the array
      //otherwise deleting will alter the indexes
      elementsToRemove.sort().reverse();
      elementsToRemove.forEach(function(elemToRemove){
        this.diagramComponents.splice(elemToRemove,1);
      },this);

      if (refreshOnSuccess) {
        this.updateDiagram();
      }

    }

    retrieveAndAddComponents(componentIds, autoIncludeComponents = false, refreshOnSuccess = true){
      var queryParams =  {
        componentId: componentIds,
        detailed: true,
      }
      var url = '/archcomponents';
      var current = this;
      $.ajax({
        dataType: "json",
        method: "GET",
        url: url,
        data: $.param(queryParams,true),
        context: {
          diagram: this,
          autoInclude: autoIncludeComponents
        },
        success: function(responseData) {
          var existingComponentIds = this.diagram.diagramComponents.map(function(ac){
            return ac.id;
          });
          if (responseData.archComponents) {
            responseData.archComponents.forEach(function(newComponent){
              //Check if the component already exists if so - ignore it
              //TODO: Delete and replace (in case relationships have changed on the server)
              if (!existingComponentIds.includes(newComponent.id)){
                diagram.diagramComponents.push(new CalypearDiagramComponent(newComponent,autoIncludeComponents));
              }
            });
          }
          if (refreshOnSuccess) {
            this.diagram.updateDiagram();
          }
        }
      });
    }

    retrieveAndAddRelatedComponents(componentId, autoIncludeComponents = false, refreshOnSuccess = true) {
      var component = this.nodeById(componentId);
      if (component) {
        var relatedComponentIds = component.getRelatedComponentIds();
        this.retrieveAndAddComponents(relatedComponentIds,autoIncludeComponents,refreshOnSuccess);
      }

    }


    updateDiagram(){
      refresh(this.nodes(), this.edges());
    }

    getDiagramSaveObject(){
      var returnObj = {
        components: [],
        name: this.diagramName,
      };
      this.diagramComponents.forEach(function(diagramComponent) {
        returnObj.components.push(diagramComponent.getDiagramSaveObject());
      });

      return returnObj;
    }

    saveDiagramToServer(){
      var saveObject = {
        diagram: this.getDiagramSaveObject()
      }
      var url = "/diagram"
      $.ajax({
        method: "POST",
        dataType : "json",
        contentType: "application/json; charset=utf-8",
        //processData: false,
        data: JSON.stringify(saveObject),
        url: url,
        context: {diagram: this},
        success: function(responseData) {
          console.log(responseData);
          //TODO: Do something with this
        }
      });
    }

    loadDiagramFromObject(diagramObject){
      this.name(diagramObject.name);
      this.id = diagramObject.id;
      this.components = [];
      var componentIds = diagramObject.components.map(function(diagramComponent){
        return diagramComponent.component;
      });
      //TODO: Need to account for Fixed Position Components?
      this.retrieveAndAddComponents(componentIds,true,true);
    }

    retrieveDiagramFromServer(diagramId){
      var url = "/diagram/"+diagramId;
      $.ajax({
        method: "GET",
        dataType : "json",
        contentType: "application/json; charset=utf-8",
        //processData: false,
        url : url,
        context: {diagram: this},
        success: function(responseData) {
          //Pick out the Diagram from the responseData
          if (responseData.diagram.length > 0)  {
            diagram.loadDiagramFromObject(responseData.diagram[0]);
          }

        }
      });
    }

  }

  var diagram = new CalypearDiagram();
  /*
    Diagram Component Add/Remove/Filter and Save Functions

    This is all to be moved to D3 style for consistency
    however Jquery will work for now as well.
  */
  $().ready(function(){
    {{#if diagram}}
      diagram.retrieveDiagramFromServer({{diagramId}});
    {{/if}}



    $('.diagram-component-add').click(function(){
      diagram.retrieveAndAddComponents([
          $(this).data('componentid')
      ],true);

    });

    $('#saveDiagramCommand').click(function(){
      diagram.name($('#fieldDiagramName').val());
      diagram.saveDiagramToServer();
    });

    $('#buttonShowMenu').click(function(){
      d3.select("#workspaceMenu").transition().style("left","0px");
    })

    $('#buttonHideMenu').click(function(){
      d3.select("#workspaceMenu").transition().style("left","-400px");
    })

  });

</script>
